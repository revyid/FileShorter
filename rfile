#!/bin/bash

# Script metadata
VERSION="4.0.0"
SCRIPT_NAME=$(basename "$0")
AUTHOR="RevyLab Complete"
YEAR=$(date +%Y)

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
DIM='\033[2m'
UNDERLINE='\033[4m'
BLINK='\033[5m'
REVERSE='\033[7m'
HIDDEN='\033[8m'
NC='\033[0m'

# File type definitions with extensions
declare -A file_types=(
    ["images"]="png jpg jpeg gif bmp webp tiff svg psd ai eps raw heic avif jfif tga pcx ico icns xcf jpx j2k jxr hdr dds"
    ["videos"]="mp4 mkv avi mov webm flv mpg mpeg wmv 3gp m4v ts vob rmvb m2ts mts divx xvid asf ogv f4v"
    ["documents"]="txt md log conf rtf ini cfg pdf doc docx xlsx xls ppt pptx odt ods odp pages numbers key wpd wps djvu"
    ["audio"]="mp3 wav m4a ogg aac flac alac wma m4b opus mid midi aiff ra dsf dff ape wv mpc"
    ["archives"]="zip rar 7z tar gz bz2 xz tgz bz tbz2 tbz tlz txz lz lzma z cab iso img dmg pkg"
    ["code"]="py js html css php java cpp c rb go rs ts jsx tsx vue php pl kt scala lua swift r bas sh bash zsh fish tcl"
    ["development"]="json xml yml yaml sql db sqlite env conf toml lock gradle pom maven ant ivy npm bower composer"
    ["fonts"]="ttf otf woff woff2 eot pfm pfb afm"
    ["design"]="dwg dxf stl obj 3ds blend skp xd fig sketch ai psd indd eps cdr"
    ["downloads"]="part crdownload tmp temp downloading incomplete"
    ["books"]="epub mobi azw azw3 fb2 lit lrf cbr cbz cb7 cbt cba"
    ["subtitles"]="srt sub idx ass ssa smi"
    ["data"]="csv tsv dat dta sav por xlsx mdb accdb dbf"
    ["web"]="htm xhtml php asp aspx jsp cfm"
    ["certificates"]="crt cer pem p12 pfx key csr"
    ["executables"]="exe msi app deb rpm pkg dmg"
)

# Protected patterns
declare -a protected_patterns=(
    "/system" "/sys" "/bin" "/sbin" "/usr" "/etc" "/var" "/boot" "/dev"
    "/proc" "/root" "/home" "/lib" "/lib64" "/run" "/snap" "/opt"
    "android" "Windows" "Program Files" "AppData" ".config" ".local"
    ".cache" ".mozilla" ".ssh" ".npm" "node_modules" ".git"
    "$HOME/Library" "$HOME/System" "$HOME/.Trash"
)

# Script settings
VERBOSE=false
DRY_RUN=false
UNSAFE_MODE=false
INTERACTIVE=false
FORCE_MODE=false
DEBUG_MODE=false
QUIET_MODE=false
MAX_DEPTH=5
MINIMUM_FREE_SPACE=1048576  # 1GB in KB
BACKUP_ENABLED=true
COMPRESSION_ENABLED=false
CHECKSUM_VERIFY=true
LOG_LEVEL=1  # 0=none, 1=error, 2=warn, 3=info, 4=debug
SORT_MODE="smart"
FOLLOW_SYMLINKS=false

# Paths
CONFIG_DIR="$HOME/.config/complete_sorter"
CACHE_DIR="$CONFIG_DIR/cache"
BACKUP_DIR="$CONFIG_DIR/backups"
LOG_DIR="$CONFIG_DIR/logs"
RULES_FILE="$CONFIG_DIR/rules.json"
STATS_FILE="$CONFIG_DIR/stats.json"
HISTORY_FILE="$LOG_DIR/history.log"
ERROR_LOG="$LOG_DIR/error.log"
DEBUG_LOG="$LOG_DIR/debug.log"

# Temporary files
TEMP_DIR="/tmp/file_sorter_$$"
LOCK_FILE="/tmp/file_sorter.lock"

# Function to show fancy banner
show_banner() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════╗"
    echo "║     Complete File Sorting System v$VERSION     ║"
    echo "║            By $AUTHOR            ║"
    echo "║         Copyright (c) $YEAR          ║"
    echo "╚══════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Function to handle cleanup on exit
cleanup() {
    local exit_code=$?
    log_operation "INFO" "CLEANUP" "Starting cleanup process"
    
    # Remove temporary files
    if [ -d "$TEMP_DIR" ]; then
        rm -rf "$TEMP_DIR"
    fi
    
    # Remove lock file
    if [ -f "$LOCK_FILE" ]; then
        rm -f "$LOCK_FILE"
    fi
    
    # Save statistics
    save_statistics
    
    # Clean old logs if needed
    rotate_logs
    
    log_operation "INFO" "CLEANUP" "Cleanup completed with exit code $exit_code"
    exit $exit_code
}

# Function to initialize working environment
init_environment() {
    # Create necessary directories
    mkdir -p "$CONFIG_DIR" "$CACHE_DIR" "$BACKUP_DIR" "$LOG_DIR" "$TEMP_DIR"
    
    # Initialize lock file
    if [ -f "$LOCK_FILE" ]; then
        local pid=$(cat "$LOCK_FILE")
        if ps -p "$pid" > /dev/null; then
            show_error "Another instance is running (PID: $pid)"
            exit 1
        fi
    fi
    echo $$ > "$LOCK_FILE"
    
    # Set up trap for cleanup
    trap cleanup EXIT INT TERM
}

# Function for enhanced logging
log_operation() {
    local level=$1
    local operation=$2
    local details=$3
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S.%N')
    local log_entry="[$timestamp][$level][$operation] $details"
    
    # Write to appropriate log file
    case "$level" in
        "ERROR")
            echo "$log_entry" >> "$ERROR_LOG"
            [ $LOG_LEVEL -ge 1 ] && echo -e "${RED}[ERROR] $details${NC}"
            ;;
        "WARNING")
            [ $LOG_LEVEL -ge 2 ] && echo "$log_entry" >> "$HISTORY_FILE"
            [ $LOG_LEVEL -ge 2 ] && echo -e "${YELLOW}[WARNING] $details${NC}"
            ;;
        "INFO")
            [ $LOG_LEVEL -ge 3 ] && echo "$log_entry" >> "$HISTORY_FILE"
            [ $LOG_LEVEL -ge 3 ] && [ "$QUIET_MODE" = false ] && echo -e "${BLUE}[INFO] $details${NC}"
            ;;
        "DEBUG")
            [ $LOG_LEVEL -ge 4 ] && echo "$log_entry" >> "$DEBUG_LOG"
            [ $LOG_LEVEL -ge 4 ] && [ "$DEBUG_MODE" = true ] && echo -e "${DIM}[DEBUG] $details${NC}"
            ;;
        "SUCCESS")
            echo "$log_entry" >> "$HISTORY_FILE"
            [ "$QUIET_MODE" = false ] && echo -e "${GREEN}[SUCCESS] $details${NC}"
            ;;
    esac
}

# Function to rotate logs
rotate_logs() {
    local max_size=10485760  # 10MB
    local max_files=5
    
    for log_file in "$ERROR_LOG" "$HISTORY_FILE" "$DEBUG_LOG"; do
        if [ -f "$log_file" ] && [ $(stat -f%z "$log_file" 2>/dev/null || stat -c%s "$log_file") -gt $max_size ]; then
            for i in $(seq $max_files -1 1); do
                [ -f "${log_file}.$i" ] && mv "${log_file}.$i" "${log_file}.$((i+1))"
            done
            mv "$log_file" "${log_file}.1"
            touch "$log_file"
        fi
    done
}

# Function to calculate file checksum
calculate_checksum() {
    local file=$1
    if command -v sha256sum >/dev/null 2>&1; then
        sha256sum "$file" | cut -d' ' -f1
    elif command -v shasum >/dev/null 2>&1; then
        shasum -a 256 "$file" | cut -d' ' -f1
    else
        md5sum "$file" | cut -d' ' -f1
    fi
}

# Function to compress file
compress_file() {
    local file=$1
    local compressed_file="${file}.gz"
    if [ "$COMPRESSION_ENABLED" = true ]; then
        if gzip -c "$file" > "$compressed_file"; then
            rm -f "$file"
            echo "$compressed_file"
        else
            echo "$file"
        fi
    else
        echo "$file"
    fi
}

# Function to extract metadata
extract_metadata() {
    local file=$1
    local metadata_file="$TEMP_DIR/metadata_$(basename "$file")"
    
    # Try different tools for metadata extraction
    if command -v exiftool >/dev/null 2>&1; then
        exiftool "$file" > "$metadata_file"
    elif command -v mediainfo >/dev/null 2>&1; then
        mediainfo "$file" > "$metadata_file"
    else
        file "$file" > "$metadata_file"
    fi
    
    echo "$metadata_file"
}

# Function for smart file type detection
detect_file_type() {
    local file=$1
    local mime_type=$(file --mime-type -b "$file")
    local ext="${file##*.}"
    
    # First try by mime type
    case "$mime_type" in
        image/*) echo "images" ;;
        video/*) echo "videos" ;;
        audio/*) echo "audio" ;;
        text/*) echo "documents" ;;
        application/pdf) echo "documents" ;;
        application/zip|application/x-rar|application/x-7z-compressed) echo "archives" ;;
        application/x-executable) echo "executables" ;;
        *) 
            # Try by extension if mime type is not conclusive
            for type in "${!file_types[@]}"; do
                if [[ " ${file_types[$type]} " =~ " $ext " ]]; then
                    echo "$type"
                    return
                fi
            done
            echo "other"
            ;;
    esac
}

# Function to verify file operation
verify_operation() {
    local source=$1
    local dest=$2
    local operation=$3
    
    case "$operation" in
        "move")
            if [ ! -f "$dest" ]; then
                log_operation "ERROR" "VERIFY" "Destination file missing: $dest"
                return 1
            fi
            if [ "$CHECKSUM_VERIFY" = true ]; then
                local source_sum=$(calculate_checksum "$source")
                local dest_sum=$(calculate_checksum "$dest")
                if [ "$source_sum" != "$dest_sum" ]; then
                    log_operation "ERROR" "VERIFY" "Checksum mismatch for $dest"
                    return 1
                fi
            fi
            ;;
        "backup")
            if [ ! -f "$dest" ]; then
                log_operation "ERROR" "VERIFY" "Backup file missing: $dest"
                return 1
            fi
            ;;
    esac
    return 0
}

# Function to create backup with versioning
create_backup() {
    local file=$1
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_path="$BACKUP_DIR/$(basename "$file").$timestamp"
    
    if [ "$BACKUP_ENABLED" = true ]; then
        if cp -p "$file" "$backup_path"; then
            if [ "$COMPRESSION_ENABLED" = true ]; then
                backup_path=$(compress_file "$backup_path")
            fi
            verify_operation "$file" "$backup_path" "backup"
            log_operation "INFO" "BACKUP" "Created backup: $backup_path"
            echo "$backup_path"
        else
            log_operation "ERROR" "BACKUP" "Failed to create backup for $file"
            return 1
        fi
    fi
}

# Function to manage backup versions
manage_backups() {
    local max_backups=5
    local max_age=7  # days
    
    # Remove old backups
    find "$BACKUP_DIR" -type f -mtime +$max_age -delete
    
    # Keep only latest versions
    for file in "$BACKUP_DIR"/*; do
        if [ -f "$file" ]; then
            local base_name=$(basename "$file" | cut -d. -f1)
            local count=$(ls -t "$BACKUP_DIR/$base_name"* 2>/dev/null | wc -l)
            if [ "$count" -gt "$max_backups" ]; then
                ls -t "$BACKUP_DIR/$base_name"* | tail -n +$((max_backups+1)) | xargs rm -f
            fi
        fi
    done
}

# Function to handle file operations safely
safe_operation() {
    local source=$1
    local dest=$2
    local operation=$3
    
    # Safety checks
    if is_protected_path "$source" || is_protected_path "$dest"; then
        log_operation "ERROR" "SAFETY" "Protected path detected: $source -> $dest"
        return 1
    fi
    
    # Check disk space
    check_disk_space "$dest"
    
    # Create backup if enabled
    if [ "$BACKUP_ENABLED" = true ]; then
        create_backup "$source"
    fi
    
    # Perform operation
    if [ "$DRY_RUN" = false ]; then
        case "$operation" in
            "move")
                if mv "$source" "$dest"; then
                    verify_operation "$source" "$dest" "move"
                    log_operation "SUCCESS" "MOVE" "$source -> $dest"
                else
                    log_operation "ERROR" "MOVE" "Failed to move $source"
                    return 1
                fi
                ;;
            "copy")
                if cp -p "$source" "$dest"; then
                    verify_operation "$source" "$dest" "copy"
                    log_operation "SUCCESS" "COPY" "$source -> $dest"
                else
                    log_operation "ERROR" "COPY" "Failed to copy $source"
                    return 1
                fi
                ;;
        esac
    else
        log_operation "INFO" "DRY_RUN" "Would $operation $source -> $dest"
    fi
}

# Function to process file based on rules
process_file() {
    local file=$1
    local mode=${2:-$SORT_MODE}
    
    # Skip if file is in protected path
    if is_protected_path "$file"; then
        log_operation "WARNING" "SKIP" "Protected path: $file"
        return 1
    }
    
    # Get file info
    local filename=$(basename "$file")
    local ext="${filename##*.}"
    ext=$(echo "$ext" | tr '[:upper:]' '[:lower:]')
    
    # Get metadata
    local metadata_file=$(extract_metadata "$file")
    
    # Determine destination based on mode
    local dest_dir=""
    case "$mode" in
        "smart")
            dest_dir=$(get_smart_destination "$file" "$metadata_file")
            ;;
        "date")
            dest_dir=$(get_date_structure "$file")
            ;;
        "type")
            dest_dir=$(detect_file_type "$file")
            ;;
        "size")
            dest_dir=$(get_size_category "$file")
            ;;
        "extension")
            dest_dir="by_extension/$ext"
            ;;
        "custom")
            dest_dir=$(apply_custom_rules "$file" "$metadata_file")
            ;;
    esac
    
    # Process the file
    if [ -n "$dest_dir" ]; then
        if [ ! -d "$dest_dir" ]; then
            mkdir -p "$dest_dir"
        fi
        safe_operation "$file" "$dest_dir/$filename" "move"
    else
        log_operation "WARNING" "PROCESS" "Could not determine destination for $file"
        return 1
    fi
}

# Function to get smart destination
get_smart_destination() {
    local file=$1
    local metadata_file=$2
    local dest=""
    
    # Check file content and metadata
    local mime_type=$(file --mime-type -b "$file")
    local file_type=$(detect_file_type "$file")
    
    # Apply smart rules
    case "$mime_type" in
        "image/"*)
            # Check if it's a screenshot
            if [[ "$(basename "$file")" =~ ^Screenshot|^Screen[[:space:]]Shot|^Capture ]]; then
                dest="screenshots/$(date +%Y/%m)"
            else
                dest="images/$(date +%Y/%m)"
            fi
            ;;
        "video/"*)
            # Check video duration if possible
            if command -v ffprobe >/dev/null 2>&1; then
                duration=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$file")
                if [ "${duration%.*}" -lt 60 ]; then
                    dest="videos/shorts"
                else
                    dest="videos/full"
                fi
            else
                dest="videos"
            fi
            ;;
        "application/pdf")
            # Check if it's a scanned document
            if grep -q "scanned" "$metadata_file"; then
                dest="documents/scanned"
            else
                dest="documents/pdf"
            fi
            ;;
        *)
            dest="$file_type"
            ;;
    esac
    
    echo "$dest"
}

# Function to get date-based structure
get_date_structure() {
    local file=$1
    local date_created=$(stat -f "%SB" "$file" 2>/dev/null || stat -c "%y" "$file")
    local year=$(date -d "$date_created" +%Y 2>/dev/null || date -j -f "%F %T" "$date_created" +%Y)
    local month=$(date -d "$date_created" +%m 2>/dev/null || date -j -f "%F %T" "$date_created" +%m)
    echo "by_date/$year/$month"
}

# Function to get size category
get_size_category() {
    local file=$1
    local size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file")
    
    if [ "$size" -lt 1048576 ]; then        # < 1MB
        echo "by_size/small"
    elif [ "$size" -lt 104857600 ]; then    # < 100MB
        echo "by_size/medium"
    elif [ "$size" -lt 1073741824 ]; then   # < 1GB
        echo "by_size/large"
    else
        echo "by_size/huge"
    fi
}

# Function to apply custom rules
apply_custom_rules() {
    local file=$1
    local metadata_file=$2
    local rules_file="$CONFIG_DIR/rules.json"
    
    if [ -f "$rules_file" ]; then
        # Parse rules and apply them
        while IFS= read -r rule; do
            if eval "$rule" "$file" "$metadata_file"; then
                echo "$dest"
                return 0
            fi
        done < "$rules_file"
    fi
    
    # Default fallback
    echo "uncategorized"
}

# Function to generate statistics
generate_statistics() {
    local dir=${1:-.}
    local stats_file="$TEMP_DIR/stats.json"
    
    echo "{" > "$stats_file"
    echo "  \"timestamp\": \"$(date '+%Y-%m-%d %H:%M:%S')\"," >> "$stats_file"
    echo "  \"total_files\": $(find "$dir" -type f | wc -l)," >> "$stats_file"
    echo "  \"total_size\": \"$(du -sh "$dir" | cut -f1)\"," >> "$stats_file"
    echo "  \"by_type\": {" >> "$stats_file"
    
    local first=true
    for type in "${!file_types[@]}"; do
        local count=$(find "$dir" -type f -exec file --mime-type {} \; | grep -c "$type")
        local size=$(find "$dir" -type f -exec file --mime-type {} \; | grep "$type" | xargs -I {} du -ch {} 2>/dev/null | tail -n1 | cut -f1)
        
        if [ "$first" = true ]; then
            first=false
        else
            echo "    ," >> "$stats_file"
        fi
        
        echo "    \"$type\": {" >> "$stats_file"
        echo "      \"count\": $count," >> "$stats_file"
        echo "      \"size\": \"$size\"" >> "$stats_file"
        echo "    }" >> "$stats_file"
    done
    
    echo "  }" >> "$stats_file"
    echo "}" >> "$stats_file"
    
    echo "$stats_file"
}

# Function to show interactive menu
show_menu() {
    while true; do
        clear
        show_banner
        echo -e "\n${BOLD}Main Menu:${NC}"
        echo "1. Sort files"
        echo "2. Analyze directory"
        echo "3. Show statistics"
        echo "4. Manage backups"
        echo "5. Configure settings"
        echo "6. View logs"
        echo "7. Help"
        echo "8. Exit"
        
        read -p "Choose an option (1-8): " choice
        
        case $choice in
            1) sort_menu ;;
            2) analyze_menu ;;
            3) stats_menu ;;
            4) backup_menu ;;
            5) settings_menu ;;
            6) logs_menu ;;
            7) show_help ;;
            8) exit 0 ;;
            *) echo "Invalid option" ;;
        esac
    done
}

# Main script execution
main() {
    # Initialize environment
    init_environment
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --help|-h)
                show_help
                exit 0
                ;;
            --version|-v)
                show_version
                exit 0
                ;;
            --interactive|-i)
                INTERACTIVE=true
                shift
                ;;
            --dry-run|-d)
                DRY_RUN=true
                shift
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --quiet|-q)
                QUIET_MODE=true
                shift
                ;;
            --debug)
                DEBUG_MODE=true
                LOG_LEVEL=4
                shift
                ;;
            --force|-f)
                FORCE_MODE=true
                shift
                ;;
            --no-backup)
                BACKUP_ENABLED=false
                shift
                ;;
            --compress|-c)
                COMPRESSION_ENABLED=true
                shift
                ;;
            --mode|-m)
                SORT_MODE="$2"
                shift 2
                ;;
            --depth)
                MAX_DEPTH="$2"
                shift 2
                ;;
            --analyze|-a)
                analyze_directory "${2:-.}"
                exit 0
                ;;
            --stats|-s)
                show_statistics "${2:-.}"
                exit 0
                ;;
            --clean)
                clean_directory "${2:-.}"
                exit 0
                ;;
            *)
                if [ "$INTERACTIVE" = true ]; then
                    show_menu
                else
                    process_directory "${1:-.}" "$SORT_MODE"
                fi
                shift
                ;;
        esac
    done
    
    # Show menu if no arguments and interactive mode
    if [ "$INTERACTIVE" = true ]; then
        show_menu
    fi
}

# Initialize and run
trap cleanup EXIT INT TERM
main "$@"
